{"version":3,"sources":["config.js","App.js","reportWebVitals.js","nft.js","index.js"],"names":["NFTCONTRACT","STAKINGCONTRACT","moralisapi","nftpng","createAlchemyWeb3","account","contract","vaultcontract","web3","Web3Alc","providerOptions","binancechainwallet","package","walletconnect","WalletConnectProvider","options","infuraId","walletlink","WalletLink","appName","rpc","chainId","appLogoUrl","darkMode","web3Modal","Web3Modal","network","theme","cacheProvider","App","state","balance","rawearn","this","setState","show","nftamount","outvalue","target","value","axios","get","then","outputa","data","console","log","config","headers","outputb","result","nftdata","sleep","milliseconds","Promise","resolve","setTimeout","delay","delayedLog","processArray","rwdArray","item","sum","reduce","a","b","formatsum","Number","toFixed","document","getElementById","textContent","connect","provider","Web3","send","eth","getAccounts","accounts","Contract","ABI","VAULTABI","methods","tokensOfOwner","call","getstakednfts","balanceOf","getbalance","arraynft","Array","from","map","tokenid","filter","forEach","id","earningInfo","array","earned","String","split","earnedrwd","utils","fromWei","rewardx","numrwd","push","setApprovalForAll","rawnfts","getMaxPriorityFeePerGas","tip","getBlock","block","baseFee","baseFeePerGas","maxPriority","maxFee","claim","maxFeePerGas","maxPriorityFeePerGas","unstake","_mintAmount","cost","mintRate","totalAmount","mint","_pid","getCryptotoken","erc20address","currency","TOKENABI","getNFTCost","approve","transfer","error","transactionHash","transactionReceipt","getTransactionReceipt","window","str","out","createElement","appendChild","createTextNode","mintpid","className","class","style","fontFamily","fontWeight","fontSize","href","src","width","type","onClick","color","textShadow","for","ButtonGroup","size","name","boxShadow","handleNFT","Button","border","borderRadius","marginTop","backgroundColor","scope","location","reload","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","moralisapikey","NFT","useState","apicall","getNfts","nftstk","getStk","loadingState","setLoadingState","output","nfts","all","i","tokenId","token_id","holder","owner_of","wallet","stakednfts","stkid","useEffect","callApi","length","display","gridTemplateColumns","columnGap","nft","toLowerCase","indexOf","stakeit","stake","alt","marginLeft","position","top","ReactDOM","createRoot","render","StrictMode"],"mappings":"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","file":"static/js/main.fcc119e1.chunk.js","sourcesContent":["import { createAlchemyWeb3 } from '@alch/alchemy-web3';\r\nexport const NFTCONTRACT = \"0x7d78EDCCBb1e0793dFD3f841934ac839502e9EeC\";\r\nexport const STAKINGCONTRACT = \"0xDe4D9C2b510E7B8deaa7d8f3610237a1dbF2B026\";\r\nexport const polygonscanapi = \"https://api-testnet.polygonscan.com/api\";\r\nexport const moralisapi = \"https://deep-index.moralis.io/api/v2/\";\r\nexport const nftpng = \"https://ipfs.io/ipfs/QmavM8Zpo9bD3r4zEnhbbBLLvHyfr1YL7f1faG3ovaeSSG/\";\r\nexport const Web3Alc = createAlchemyWeb3(\"https://polygon-mumbai.g.alchemy.com/v2/8AX5AP2TU6G45ctsOXNt8K4Fz_BkhhZG\");","import './App.css';\nimport { Button, ButtonGroup } from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport React, { Component } from 'react';\nimport 'sf-font';\nimport axios from 'axios';\nimport ABI from './ABI.json';\nimport VAULTABI from './VAULTABI.json';\nimport TOKENABI from './TOKENABI.json';\nimport { NFTCONTRACT, STAKINGCONTRACT, polygonscanapi, moralisapi, nftpng } from './config';\nimport Web3Modal from \"web3modal\";\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\nimport WalletLink from \"walletlink\";\nimport Web3 from 'web3';\nimport { createAlchemyWeb3 } from '@alch/alchemy-web3';\n\nvar account = null;\nvar contract = null;\nvar vaultcontract = null;\nvar web3 = null;\n\nconst Web3Alc = createAlchemyWeb3(\"https://eth-rinkeby.alchemyapi.io/v2/8AX5AP2TU6G45ctsOXNt8K4Fz_BkhhZG\");\n\nconst moralisapikey = \"2VBV4vaCLiuGu6Vu7epXKlFItGe3jSPON8WV4CrXKYaNBEazEUrf1xwHxbrIo1oM\";\nconst polygonscanapikey = \"DBQX5JUSAVUZRK8CC4IN2UZF9N2HA63P4U\";\n\nconst providerOptions = {\n\tbinancechainwallet: {\n\t\tpackage: true\n\t  },\n\t  walletconnect: {\n\t\tpackage: WalletConnectProvider,\n\t\toptions: {\n\t\t  infuraId: \"3cf2d8833a2143b795b7796087fff369\"\n\t\t}\n\t},\n\twalletlink: {\n\t\tpackage: WalletLink, \n\t\toptions: {\n\t\t  appName: \"Net2Dev NFT Minter\", \n\t\t  infuraId: \"3cf2d8833a2143b795b7796087fff369\",\n\t\t  rpc: \"\", \n\t\t  chainId: 4, \n\t\t  appLogoUrl: null, \n\t\t  darkMode: true \n\t\t}\n\t  },\n};\n\nconst web3Modal = new Web3Modal({\n\tnetwork: \"rinkeby\",\n\ttheme: \"dark\",\n\tcacheProvider: true,\n\tproviderOptions \n  });\n\nclass App extends Component {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = {\n\t\t\tbalance: [],\n\t\t\trawearn: [],\n\t\t};\n\t}\n  \n\thandleModal(){  \n\t\tthis.setState({show:!this.state.show})  \n\t} \n\n\thandleNFT(nftamount) {\n\t\tthis.setState({outvalue:nftamount.target.value});\n  \t}\n\n\tasync componentDidMount() {\n\t\t\n\t\tawait axios.get((polygonscanapi + `?module=stats&action=tokensupply&contractaddress=${NFTCONTRACT}&apikey=${polygonscanapikey}`))\n\t\t.then(outputa => {\n            this.setState({\n                balance:outputa.data\n            })\n            console.log(outputa.data)\n        })\n\t\tlet config = {'X-API-Key': moralisapikey, 'accept': 'application/json'};\n\t\tawait axios.get((moralisapi + `/nft/${NFTCONTRACT}/owners?chain=mumbai&format=decimal`), {headers: config})\n\t\t.then(outputb => {\n\t\t\tconst { result } = outputb.data\n            this.setState({\n                nftdata:result\n            })\n            console.log(outputb.data)\n        })\n\t}\n\n\nrender() {\n\tconst {balance} = this.state;\n\tconst {outvalue} = this.state;\n  \n\n  const sleep = (milliseconds) => {\n    return new Promise(resolve => setTimeout(resolve, milliseconds))\n  }\n\n  const expectedBlockTime = 10000;\n\n  async function connectwallet() {\n    var provider = await web3Modal.connect();\n    web3 = new Web3(provider);\n    await provider.send('eth_requestAccounts');\n    var accounts = await web3.eth.getAccounts();\n    account = accounts[0];\n    document.getElementById('wallet-address').textContent = account;\n    contract = new web3.eth.Contract(ABI, NFTCONTRACT);\n    vaultcontract = new web3.eth.Contract(VAULTABI, STAKINGCONTRACT);\n    var getstakednfts = await vaultcontract.methods.tokensOfOwner(account).call();\n    document.getElementById('yournfts').textContent = getstakednfts;\n    var getbalance = Number(await vaultcontract.methods.balanceOf(account).call());\n    document.getElementById('stakedbalance').textContent = getbalance;\n    const arraynft = Array.from(getstakednfts.map(Number));\n\t\tconst tokenid = arraynft.filter(Number);\n\t\tvar rwdArray = [];\n    tokenid.forEach(async (id) => {\n      var rawearn = await vaultcontract.methods.earningInfo(account, [id]).call();\n      var array = Array.from(rawearn.map(Number));\n      console.log(array);\n      array.forEach(async (item) => {\n        var earned = String(item).split(\",\")[0];\n        var earnedrwd = Web3.utils.fromWei(earned);\n        var rewardx = Number(earnedrwd).toFixed(2);\n        var numrwd = Number(rewardx);\n        console.log(numrwd);\n        rwdArray.push(numrwd);\n      });\n    });\n    function delay() {\n      return new Promise(resolve => setTimeout(resolve, 300));\n    }\n    async function delayedLog(item) {\n      await delay();\n      var sum = item.reduce((a, b) => a + b, 0);\n      var formatsum = Number(sum).toFixed(2);\n      document.getElementById('earned').textContent = formatsum;\n    }\n    async function processArray(rwdArray) {\n      for (const item of rwdArray) {\n        await delayedLog(item);\n      }\n    }\n    return processArray([rwdArray]);\n  }\n\n  async function verify() {\n    var getstakednfts = await vaultcontract.methods.tokensOfOwner(account).call();\n    document.getElementById('yournfts').textContent = getstakednfts;\n    var getbalance = Number(await vaultcontract.methods.balanceOf(account).call());\n    document.getElementById('stakedbalance').textContent = getbalance;\n  }\n\n  async function enable() {\n    contract.methods.setApprovalForAll(STAKINGCONTRACT, true).send({ from: account });\n  }\n  async function rewardinfo() {\n    var rawnfts = await vaultcontract.methods.tokensOfOwner(account).call();\n    const arraynft = Array.from(rawnfts.map(Number));\n    const tokenid = arraynft.filter(Number);\n    var rwdArray = [];\n    tokenid.forEach(async (id) => {\n      var rawearn = await vaultcontract.methods.earningInfo(account, [id]).call();\n      var array = Array.from(rawearn.map(Number));\n      array.forEach(async (item) => {\n        var earned = String(item).split(\",\")[0];\n        var earnedrwd = Web3.utils.fromWei(earned);\n        var rewardx = Number(earnedrwd).toFixed(2);\n        var numrwd = Number(rewardx);\n        rwdArray.push(numrwd)\n      });\n    });\n    function delay() {\n      return new Promise(resolve => setTimeout(resolve, 300));\n    }\n    async function delayedLog(item) {\n      await delay();\n      var sum = item.reduce((a, b) => a + b, 0);\n      var formatsum = Number(sum).toFixed(2);\n      document.getElementById('earned').textContent = formatsum;\n    }\n    async function processArray(rwdArray) {\n      for (const item of rwdArray) {\n        await delayedLog(item);\n      }\n    }\n    return processArray([rwdArray]);\n  }\n  async function claimit() {\n    var rawnfts = await vaultcontract.methods.tokensOfOwner(account).call();\n    const arraynft = Array.from(rawnfts.map(Number));\n    const tokenid = arraynft.filter(Number);\n    await Web3Alc.eth.getMaxPriorityFeePerGas().then((tip) => {\n      Web3Alc.eth.getBlock('pending').then((block) => {\n        var baseFee = Number(block.baseFeePerGas);\n        var maxPriority = Number(tip);\n        var maxFee = maxPriority + baseFee;\n        tokenid.forEach(async (id) => {\n          await vaultcontract.methods.claim([id])\n            .send({\n              from: account,\n              maxFeePerGas: maxFee,\n              maxPriorityFeePerGas: maxPriority\n            })\n        })\n      });\n    })\n  }\n  async function unstakeall() {\n    var rawnfts = await vaultcontract.methods.tokensOfOwner(account).call();\n    const arraynft = Array.from(rawnfts.map(Number));\n    const tokenid = arraynft.filter(Number);\n    await Web3Alc.eth.getMaxPriorityFeePerGas().then((tip) => {\n      Web3Alc.eth.getBlock('pending').then((block) => {\n        var baseFee = Number(block.baseFeePerGas);\n        var maxPriority = Number(tip);\n        var maxFee = maxPriority + baseFee;\n        tokenid.forEach(async (id) => {\n          await vaultcontract.methods.unstake([id])\n            .send({\n              from: account,\n              maxFeePerGas: maxFee,\n              maxPriorityFeePerGas: maxPriority\n            })\n        })\n      });\n    })\n  }\n  async function mintnative() {\n    var _mintAmount = Number(outvalue);\n    var mintRate = Number(await contract.methods.cost().call());\n    var totalAmount = mintRate * _mintAmount;\n    await Web3Alc.eth.getMaxPriorityFeePerGas().then((tip) => {\n        Web3Alc.eth.getBlock('pending').then((block) => {\n            var baseFee = Number(block.baseFeePerGas);\n            var maxPriority = Number(tip);\n            var maxFee = baseFee + maxPriority\n        contract.methods.mint(account, _mintAmount)\n            .send({ from: account,\n              value: String(totalAmount),\n              maxFeePerGas: maxFee,\n              maxPriorityFeePerGas: maxPriority});\n        });\n    })\n  }\n\n  async function mint0() {\n    var _pid = \"0\";\n    var erc20address = await contract.methods.getCryptotoken(_pid).call();\n    var currency = new web3.eth.Contract(TOKENABI, erc20address);\n    var mintRate = await contract.methods.getNFTCost(_pid).call();\n    var _mintAmount = Number(outvalue);\n    var totalAmount = mintRate * _mintAmount;\n    await Web3Alc.eth.getMaxPriorityFeePerGas().then((tip) => {\n      Web3Alc.eth.getBlock('pending').then((block) => {\n        var baseFee = Number(block.baseFeePerGas);\n        var maxPriority = Number(tip);\n        var maxFee = maxPriority + baseFee;\n        currency.methods.approve(NFTCONTRACT, String(totalAmount))\n\t\t\t\t\t  .send({\n\t\t\t\t\t\t  from: account})\n              .then(currency.methods.transfer(NFTCONTRACT, String(totalAmount))\n\t\t\t\t\t\t  .send({\n\t\t\t\t\t\t\t  from: account,\n\t\t\t\t\t\t\t  maxFeePerGas: maxFee,\n\t\t\t\t\t\t\t  maxPriorityFeePerGas: maxPriority\n\t\t\t\t\t\t  },\n              async function (error, transactionHash) {\n                console.log(\"Transfer Submitted, Hash: \", transactionHash)\n                let transactionReceipt = null\n                while (transactionReceipt == null) {\n                  transactionReceipt = await web3.eth.getTransactionReceipt(transactionHash);\n                  await sleep(expectedBlockTime)\n                }\n                window.console = {\n                  log: function (str) {\n                    var out = document.createElement(\"div\");\n                    out.appendChild(document.createTextNode(str));\n                    document.getElementById(\"txout\").appendChild(out);\n                  }\n                }\n                console.log(\"Transfer Complete\", transactionReceipt);\n                contract.methods.mintpid(account, _mintAmount, _pid)\n                .send({\n                  from: account,\n                  maxFeePerGas: maxFee,\n                  maxPriorityFeePerGas: maxPriority\n                });\n            }));\n    });\n  });\n}\nconst refreshPage = ()=>{\n  window.location.reload();  \n}\n\n  return (\n    <div className=\"App nftapp\">\n        <nav class=\"navbar navbarfont navbarglow navbar-expand-md navbar-dark bg-dark mb-4\">\n          <div class=\"container-fluid\" style={{ fontFamily: \"SF Pro Display\" }}>\n            <a class=\"navbar-brand px-5\" style={{ fontWeight: \"800\", fontSize: '25px' }} href=\"#\"></a><img src=\"n2d-logo.png\" width=\"7%\" />\n            <button class=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarCollapse\" aria-controls=\"navbarCollapse\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n              <span class=\"navbar-toggler-icon\"></span>\n            </button>\n            <div class=\"collapse navbar-collapse\" id=\"navbarCollapse\">\n              <ul class=\"navbar-nav me-auto mb-2 px-3 mb-md-0\" style={{ fontSize: \"25px\" }}>\n                <li class=\"nav-item\">\n                  <a class=\"nav-link active\" aria-current=\"page\" href=\"#\">Dashboard</a>\n                </li>\n                <li class=\"nav-item\">\n                  <a class=\"nav-link\" href=\"#\">List NFTs</a>\n                </li>\n                <li class=\"nav-item\">\n                  <a class=\"nav-link\">Bridge NFTs</a>\n                </li>\n              </ul>\n            </div>\n          </div>\n          <div className='px-5'>\n            <input id=\"connectbtn\" type=\"button\" className=\"connectbutton\" onClick={connectwallet} style={{ fontFamily: \"SF Pro Display\" }} value=\"Connect Your Wallet\" />\n          </div>\n        </nav>\n        <div className='container container-style'>\n          <div className='col'>\n            <body className='nftminter'>\n          <form>\n            <div className=\"row pt-3\">\n              <div>\n                <h1 className=\"pt-2\" style={{ fontWeight: \"30\" }}>NFT Minter</h1>\n              </div>\n              <h3>{balance.result}/1000</h3>\n              <h6>Your Wallet Address</h6>\n              <div className=\"pb-3\" id='wallet-address' style={{\n                color: \"#39FF14\",\n                fontWeight: \"400\",\n                textShadow: \"1px 1px 1px black\",\n              }}>\n                <label for=\"floatingInput\">Please Connect Wallet</label>\n              </div>\n            </div>\n            <div>\n              <label style={{ fontWeight: \"300\", fontSize: \"18px\" }}>Select NFT Quantity</label>\n            </div>\n            <ButtonGroup size=\"lg\"\n              aria-label=\"First group\"\n              name=\"amount\"\n              style={{ boxShadow: \"1px 1px 5px #000000\" }}\n              onClick={nftamount => this.handleNFT(nftamount, \"value\")}\n            >\n              <Button value=\"1\">1</Button>\n              <Button value=\"2\">2</Button>\n              <Button value=\"3\">3</Button>\n              <Button value=\"4\">4</Button>\n              <Button value=\"5\">5</Button>\n            </ButtonGroup>\n            <h6 className=\"pt-2\" style={{ fontFamily: \"SF Pro Display\", fontWeight: \"300\", fontSize: \"18px\" }}>Buy with your preferred crypto!</h6>\n            <div className=\"row px-2 pb-2 row-style\">\n              <div className=\"col \">\n                <Button className=\"button-style\" onClick={mint0} style={{ border: \"0.2px\", borderRadius: \"14px\", boxShadow: \"1px 1px 5px #000000\" }}>\n                  <img src={\"n2dr-logo.png\"} width=\"100%\" />\n                </Button>\n              </div>\n              <div className=\"col\">\n                <Button className=\"button-style\" style={{ border: \"0.2px\", borderRadius: \"14px\", boxShadow: \"1px 1px 5px #000000\" }}>\n                  <img src=\"usdt.png\" width=\"70%\" />\n                </Button>\n              </div>\n              <div className=\"col\">\n                <Button className=\"button-style\" onClick={mintnative} style={{ border: \"0.2px\", borderRadius: \"14px\", boxShadow: \"1px 1px 5px #000000\" }}>\n                  <img src=\"matic.png\" width=\"70%\" />\n                </Button>\n              </div>\n              <div>\n                <label id='txout' style={{ color: \"#39FF14\", marginTop: \"5px\", fontSize: '20px', fontWeight: '500', textShadow: \"1px 1px 2px #000000\" }}>\n                  <p style={{ fontSize: \"20px\" }}>Transfer Status</p>\n                </label>\n              </div>\n            </div>\n          </form>\n          </body>\n          </div>\n        <div className='col'>\n          <body className='nftstaker border-0'>\n            <form  style={{ fontFamily: \"SF Pro Display\" }} >\n              <h2 style={{ borderRadius: '14px', fontWeight: \"300\", fontSize: \"25px\" }}>N2DR NFT Staking Vault </h2>\n              <h6 style={{ fontWeight: \"300\" }}>First time staking?</h6>\n              <Button className=\"btn\" onClick={enable} style={{ backgroundColor: \"#ffffff10\", boxShadow: \"1px 1px 5px #000000\" }} >Authorize Your Wallet</Button>\n              <div className=\"row px-3\">\n                <div className=\"col\">\n                  <form class=\"stakingrewards\" style={{ borderRadius: \"25px\", boxShadow: \"1px 1px 15px #ffffff\" }}>\n                    <h5 style={{ color: \"#FFFFFF\", fontWeight: '300' }}>Your Vault Activity</h5>\n                    <h6 style={{ color: \"#FFFFFF\" }}>Verify Staked Amount</h6>\n                    <Button onClick={verify} style={{ backgroundColor: \"#ffffff10\", boxShadow: \"1px 1px 5px #000000\" }} >Verify</Button>\n                    <table className='table mt-3 mb-5 px-3 table-dark'>\n                      <tr>\n                        <td style={{ fontSize: \"19px\" }}>Your Staked NFTs:\n                          <span style={{ backgroundColor: \"#ffffff00\", fontSize: \"21px\", color: \"#39FF14\", fontWeight: \"500\", textShadow: \"1px 1px 2px #000000\" }} id='yournfts'></span>\n                        </td>\n                      </tr>\n                      <tr>\n                        <td style={{ fontSize: \"19px\" }}>Total Staked NFTs:\n                          <span style={{ backgroundColor: \"#ffffff00\", fontSize: \"21px\", color: \"#39FF14\", fontWeight: \"500\", textShadow: \"1px 1px 2px #000000\" }} id='stakedbalance'></span>\n                        </td>\n                      </tr>\n                      <tr>\n                        <td style={{ fontSize: \"19px\" }}>Unstake All Staked NFTs\n                          <Button onClick={unstakeall} className='mb-3' style={{ backgroundColor: \"#ffffff10\", boxShadow: \"1px 1px 5px #000000\" }}>Unstake All</Button>\n                        </td>\n                      </tr>\n                    </table>\n                  </form>\n                  </div>\n                  <img className=\"col-lg-4\" src=\"art.png\"/>\n                  <div className=\"col\">\n                    <form className='stakingrewards' style={{ borderRadius: \"25px\", boxShadow: \"1px 1px 15px #ffffff\", fontFamily: \"SF Pro Display\" }}>\n                      <h5 style={{ color: \"#FFFFFF\", fontWeight: '300' }}> Staking Rewards</h5>\n                      <Button onClick={rewardinfo} style={{ backgroundColor: \"#ffffff10\", boxShadow: \"1px 1px 5px #000000\" }} >Earned N2D Rewards</Button>\n                      <div id='earned' style={{ color: \"#39FF14\", marginTop: \"5px\", fontSize: '25px', fontWeight: '500', textShadow: \"1px 1px 2px #000000\" }}><p style={{ fontSize: \"20px\" }}>Earned Tokens</p></div>\n                      <div className='col-12 mt-2'>\n                        <div style={{ color: 'white' }}>Claim Rewards</div>\n                        <Button onClick={claimit} style={{ backgroundColor: \"#ffffff10\", boxShadow: \"1px 1px 5px #000000\" }} className=\"mb-2\">Claim</Button>\n                      </div>\n                    </form>\n                  </div>\n                </div>\n                <div className=\"row px-4 pt-2\">\n                  <div class=\"header\">\n                    <div style={{ fontSize: '25px', borderRadius: '14px', color: \"#ffffff\", fontWeight: \"300\" }}>N2DR NFT Staking Pool Active Rewards</div>\n                    <table className='table px-3 table-bordered table-dark'>\n                      <thead className='thead-light'>\n                        <tr>\n                          <th scope=\"col\">Collection</th>\n                          <th scope=\"col\">Rewards Per Day</th>\n                          <th scope=\"col\">Exchangeable Items</th>\n                        </tr>\n                      </thead>\n                      <tbody>\n                        <tr>\n                          <td>N2D Bronze Collection</td>\n                          <td class=\"amount\" data-test-id=\"rewards-summary-ads\">\n                            <span class=\"amount\">0.50</span>&nbsp;<span class=\"currency\">N2DR</span>\n                          </td>\n                          <td class=\"exchange\">\n                            <span class=\"amount\">2</span>&nbsp;<span class=\"currency\">NFTs/M</span>\n                          </td>\n                        </tr>\n                        <tr>\n                          <td>N2D Silver Collection</td>\n                          <td class=\"amount\" data-test-id=\"rewards-summary-ac\">\n                            <span class=\"amount\">2.50</span>&nbsp;<span class=\"currency\">N2DR</span>\n                          </td>\n                          <td class=\"exchange\"><span class=\"amount\">10</span>&nbsp;<span class=\"currency\">NFTs/M</span>\n                          </td>\n                        </tr>\n                        <tr className='stakegoldeffect'>\n                          <td>N2D Gold Collection</td>\n                          <td class=\"amount\" data-test-id=\"rewards-summary-one-time\"><span class=\"amount\">1</span>&nbsp;<span class=\"currency\">N2DR+</span>\n                          </td>\n                          <td class=\"exchange\">\n                            <span class=\"amount\">25 NFTs/M or </span>\n                            <span class=\"currency\">100 N2DR/M</span>\n                          </td>\n                        </tr>\n                      </tbody>\n                    </table>\n\n                    <div class=\"header\">\n                      <div style={{ fontSize: '25px', borderRadius: '14px', fontWeight: '300' }}>N2DR Token Stake Farms</div>\n                      <table className='table table-bordered table-dark' style={{ borderRadius: '14px' }} >\n                        <thead className='thead-light'>\n                          <tr>\n                            <th scope=\"col\">Farm Pools</th>\n                            <th scope=\"col\">Harvest Daily Earnings</th>\n                          </tr>\n                        </thead>\n                        <tbody>\n                          <tr>\n                            <td>Stake N2DR to Earn N2DR</td>\n                            <td class=\"amount\" data-test-id=\"rewards-summary-ads\">\n                              <span class=\"amount\">0.01</span>&nbsp;<span class=\"currency\">Per N2DR</span>\n                            </td>\n                          </tr>\n                          <tr>\n                            <td>Stake N2DR to Earn N2DR+</td>\n                            <td class=\"amount\" data-test-id=\"rewards-summary-ac\">\n                              <span class=\"amount\">0.005</span>&nbsp;<span class=\"currency\">Per N2DR</span>\n                            </td>\n                          </tr>\n                        </tbody>\n                      </table>\n                    </div>\n                  </div>\n                </div>\n            </form>\n          </body>\n        </div>\n      </div>\n      <div className='row nftportal mt-3'>\n        <div className='col mt-4 ml-3'>\n        <img src=\"polygon.png\" width={'60%'}></img>\n      </div>\n      <div className='col'>\n        <h1 className='n2dtitlestyle mt-3'>Your NFT Portal</h1>\n      <Button onClick={refreshPage} style={{ backgroundColor: \"#000000\", boxShadow: \"1px 1px 5px #000000\" }}>Refresh NFT Portal</Button>\n      </div>\n      <div className='col mt-3 mr-5'>\n      <img src=\"ethereum.png\" width={'60%'}></img>\n      </div>\n      </div>\n      </div>\n    )\n  }\n}\nexport default App;\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import './App.css';\r\nimport { Button } from 'react-bootstrap';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport React from 'react';\r\nimport { useEffect, useState } from 'react'\r\nimport 'sf-font';\r\nimport axios from 'axios';\r\nimport VAULTABI from './VAULTABI.json';\r\nimport { NFTCONTRACT, STAKINGCONTRACT, moralisapi, nftpng } from './config';\r\nimport Web3Modal from \"web3modal\";\r\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\r\nimport WalletLink from \"walletlink\";\r\nimport Web3 from 'web3';\r\n\r\nvar web3 = null;\r\nvar account = null;\r\nvar vaultcontract = null;\r\n\r\nconst moralisapikey = \"2VBV4vaCLiuGu6Vu7epXKlFItGe3jSPON8WV4CrXKYaNBEazEUrf1xwHxbrIo1oM\";\r\nconst providerOptions = {\r\n\tbinancechainwallet: {\r\n\t\tpackage: true\r\n\t  },\r\n\t  walletconnect: {\r\n\t\tpackage: WalletConnectProvider,\r\n\t\toptions: {\r\n\t\t  infuraId: \"3cf2d8833a2143b795b7796087fff369\"\r\n\t\t}\r\n\t},\r\n\twalletlink: {\r\n\t\tpackage: WalletLink, \r\n\t\toptions: {\r\n\t\t  appName: \"Net2Dev NFT Minter\", \r\n\t\t  infuraId: \"3cf2d8833a2143b795b7796087fff369\",\r\n\t\t  rpc: \"\", \r\n\t\t  chainId: 4, \r\n\t\t  appLogoUrl: null, \r\n\t\t  darkMode: true \r\n\t\t}\r\n\t  },\r\n};\r\n\r\nconst web3Modal = new Web3Modal({\r\n\tnetwork: \"rinkeby\",\r\n\ttheme: \"dark\",\r\n\tcacheProvider: true,\r\n\tproviderOptions \r\n  });\r\n\r\nexport default function NFT() {\r\n  const [apicall, getNfts] = useState([])\r\n  const [nftstk, getStk] = useState([])\r\n  const [loadingState, setLoadingState] = useState('not-loaded')\r\n\r\n  useEffect(() => {\r\n    callApi()\r\n  }, [])\r\n\r\n  async function callApi() {\r\n    var provider = await web3Modal.connect();\r\n    web3 = new Web3(provider);\r\n    await provider.send('eth_requestAccounts');\r\n    var accounts = await web3.eth.getAccounts();\r\n    account = accounts[0];\r\n    vaultcontract = new web3.eth.Contract(VAULTABI, STAKINGCONTRACT);\r\n\t\tlet config = {'X-API-Key': moralisapikey, 'accept': 'application/json'};\r\n\t\tconst nfts = await axios.get((moralisapi + `/nft/${NFTCONTRACT}/owners?chain=mumbai&format=decimal`), {headers: config})\r\n    .then(output => {\r\n        const { result } = output.data\r\n        return result;\r\n      })\r\n    const apicall = await Promise.all(nfts.map(async i => {\r\n      let item = {\r\n        tokenId: i.token_id,\r\n        holder: i.owner_of,\r\n        wallet: account,\r\n      }\r\n      return item\r\n    }))\r\n    const stakednfts = await vaultcontract.methods.tokensOfOwner(account).call()\r\n    .then(id => {\r\n      return id;\r\n    })\r\n    const nftstk = await Promise.all(stakednfts.map(async i => {\r\n      let stkid = {\r\n        tokenId: i,\r\n      }\r\n      return stkid\r\n    }))\r\n      getNfts(apicall)\r\n      getStk(nftstk)\r\n      console.log(apicall);\r\n      setLoadingState('loaded')\r\n    } \r\n    if (loadingState === 'loaded' && !apicall.length) \r\n    return (\r\n          <h1 className=\"text-3xl\">Wallet Not Connected</h1>)\r\n    return (\r\n        <div className='nftportal mb-4'>\r\n            <div className=\"container col-lg-11\">\r\n              <div className=\"row items px-3 pt-3\">\r\n                <div className=\"ml-3 mr-3\" style={{ display: \"inline-grid\", gridTemplateColumns: \"repeat(4, 5fr)\", columnGap: \"20px\" }}>\r\n                  {apicall.map((nft, i) => {\r\n                    var owner = nft.wallet.toLowerCase();\r\n                      if (owner.indexOf(nft.holder) !== -1) {\r\n                    async function stakeit() {\r\n                      vaultcontract.methods.stake([nft.tokenId]).send({ from: account });\r\n                    }\r\n                    return (\r\n                      <div className=\"card nft-card mt-3 mb-3\" key={i} >\r\n                        <div className=\"image-over\">\r\n                          <img className=\"card-img-top\" src={nftpng + nft.tokenId + '.png'} alt=\"\" />\r\n                        </div>\r\n                        <div className=\"card-caption col-12 p-0\">\r\n                          <div className=\"card-body\">\r\n                            <h5 className=\"mb-0\">Net2Dev Collection NFT #{nft.tokenId}</h5>\r\n                            <h5 className=\"mb-0 mt-2\">Status<p style={{ color: \"#39FF14\", fontWeight: \"bold\", textShadow: \"1px 1px 2px #000000\" }}>Ready to Stake</p></h5>\r\n                            <div className=\"card-bottom d-flex justify-content-between\">\r\n                              <input key={i} type=\"hidden\" id='stakeid' value={nft.tokenId} />\r\n                              <Button style={{ marginLeft: '2px', backgroundColor: \"#ffffff10\" }} onClick={stakeit}>Stake it</Button>\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    )}})}\r\n                    {nftstk.map((nft, i) => {\r\n                      async function unstakeit() {\r\n                        vaultcontract.methods.unstake([nft.tokenId]).send({ from: account });\r\n                      }\r\n                      return (\r\n                        <div>\r\n                        \r\n                        <div className=\"card stakedcard mt-3 mb-3\" key={i} >\r\n                          <div className=\"image-over\">\r\n                          <img style={{position:'absolute',top:'0.05rem',width:'90px'}} src='stakeicon.png'></img>\r\n                            <img className=\"card-img-top\" src={nftpng + nft.tokenId + '.png'} alt=\"\" />\r\n                          </div>\r\n                          <div className=\"card-caption col-12 p-0\">\r\n                            <div className=\"card-body\">\r\n                              <h5 className=\"mb-0\">Net2Dev Collection NFT #{nft.tokenId}</h5>\r\n                              <h5 className=\"mb-0 mt-2\">Status<p style={{ color: \"#15F4EE\", fontWeight: \"bold\", textShadow: \"1px 1px 2px #000000\" }}>Currently Staked</p></h5>\r\n                              <div className=\"card-bottom d-flex justify-content-between\">\r\n                                <input key={i} type=\"hidden\" id='stakeid' value={nft.tokenId} />\r\n                                <Button style={{ marginLeft: '2px', backgroundColor: \"#ffffff10\" }} onClick={unstakeit}>Unstake it</Button>\r\n                              </div>\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                        </div>\r\n                      )})}\r\n                </div>\r\n              </div>\r\n            </div>\r\n            </div>\r\n        )\r\n    }\r\n    ","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport reportWebVitals from './reportWebVitals';\nimport { Routes, Route } from \"react-router-dom\";\nimport Nft from './nft';\n\n<Routes>\n<Route path=\"/nft\" element={<Nft />} />\n</Routes>\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  \n  <React.StrictMode>\n    <App />\n    <Nft />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}